{
  "name": "GPT ComfyUI Helper",
  "nodes": [
    {
      "parameters": {
        "fieldToSplitOut": "body.channel_id, body.text, body.user_name",
        "options": {}
      },
      "id": "3d3273b5-6c21-4a2e-baf7-507a290c147d",
      "name": "Split Out",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        820,
        1460
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a740b3c3-2ece-4d28-97d2-3773e159c1fd",
              "name": "channel_id",
              "value": "={{ $json['body.channel_id'] }}",
              "type": "string"
            },
            {
              "id": "983e8686-2e47-4bae-aaa9-a1fe90c975d3",
              "name": "text",
              "value": "={{ $json['body.text'] }}",
              "type": "string"
            },
            {
              "id": "e0230e33-4937-4996-b79f-0bfbcf41afe2",
              "name": "user_name",
              "value": "={{ $json['body.user_name'] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "bccf3d84-844e-4030-a382-3b3435b21413",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        980,
        1460
      ]
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "={{ $json.channel_id }}",
          "mode": "id"
        },
        "text": "=\"{{ $json.text }}\" *asked by {{ $json.user_name }}*",
        "otherOptions": {
          "includeLinkToWorkflow": false
        }
      },
      "id": "89341ce3-4f8d-4f90-bcdb-078d1139053c",
      "name": "Slack",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.2,
      "position": [
        1140,
        1460
      ],
      "credentials": {
        "slackApi": {
          "id": "NqwWB9a6p0EO1gKx",
          "name": "Slack SNOW n8n-bot OAUTH TOKEN"
        }
      }
    },
    {
      "parameters": {
        "fieldToSplitOut": "message_timestamp",
        "options": {}
      },
      "id": "43c7a8f3-ca20-498d-a6cf-c21f10d34246",
      "name": "Split Out1",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1300,
        1460
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "id": "6f0fa3ed-af48-461e-88a3-ebc38705b906",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        1480,
        1460
      ]
    },
    {
      "parameters": {
        "url": "=https://www.comfydeploy.com/comfy-node",
        "options": {}
      },
      "id": "0ffa9618-2cdf-453e-8b0a-81536ddb29c0",
      "name": "Fetch custom node list",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        840,
        100
      ],
      "typeVersion": 4.1,
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "fieldToSplitOut": "url",
        "options": {}
      },
      "id": "e45af371-c15a-4c4e-8896-30f4e8958913",
      "name": "URL",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1240,
        20
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "info",
        "options": {}
      },
      "id": "cb118e4f-7676-4912-89c0-d2a725eded2f",
      "name": "Node Info",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1240,
        180
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4f077613-2bff-4dd7-937a-08b3036c8f4b",
              "name": "url",
              "value": "={{ \"https://www.comfydeploy.com\".concat($json.url) }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "37d0f6b7-f36b-4845-93cc-b33192128651",
      "name": "Full URL",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1400,
        20
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1c7626ec-1d6d-4f1b-a762-41f2d1950b8b",
              "name": "title",
              "value": "={{ $json.info.match('title=\\\"([^\"]+)\\\"')[1] }}",
              "type": "string"
            },
            {
              "id": "3da70911-ecb8-4890-a717-2a36d82166dc",
              "name": "author",
              "value": "={{ $json.info.match('<p class=\"text-sm text-muted-foreground\">([^<]+)</p>')[1] }}",
              "type": "string"
            },
            {
              "id": "b5ffde0c-3387-4d70-aaa9-c81a79d6e941",
              "name": "description",
              "value": "={{ $json.info.match('<p class=\"text-sm mt-2 line-clamp-3\">([^<]+)</p>')[1] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "d2269023-21a5-44b7-b384-caf8cb48daac",
      "name": "Parse Node Info",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1400,
        200
      ]
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "create",
        "projectId": "p4l6ab2n9ezvidr",
        "table": "m6z97l2pnysdafx",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldName": "=title",
              "fieldValue": "={{ $json.title }}"
            },
            {
              "fieldName": "author",
              "fieldValue": "={{ $json.author }}"
            },
            {
              "fieldName": "=stars",
              "fieldValue": "={{ $json.stars }}"
            },
            {
              "fieldName": "description",
              "fieldValue": "={{ $json.description }}"
            },
            {
              "fieldName": "url",
              "fieldValue": "={{ $json.url }}"
            }
          ]
        }
      },
      "id": "19064da8-a2a9-4661-9286-4e73c7629158",
      "name": "Create Rows",
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        2520,
        180
      ],
      "credentials": {
        "nocoDbApiToken": {
          "id": "CdAgYZE9UhJrdXfW",
          "name": "NocoDB Token account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Update Custom Nodes Info\n\nIt checks the custom node information exists in the database (NOCODB).\nIf not exists it is inserted in the database and the vector store.",
        "height": 145.74026350868147,
        "width": 562.1030855439259
      },
      "id": "2e5a076f-5708-4417-bdd8-2127641277ad",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        560,
        -280
      ]
    },
    {
      "parameters": {
        "content": "## Q&A",
        "height": 163.55282214108462,
        "width": 538.2574995109144
      },
      "id": "8e48fef5-2e4f-442e-a3bd-d3bb990c3b36",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        560,
        1140
      ]
    },
    {
      "parameters": {
        "operation": "extractHtmlContent",
        "dataPropertyName": "=data",
        "extractionValues": {
          "values": [
            {
              "key": "url",
              "cssSelector": "a[href*=\"/comfy-node/\"]",
              "returnValue": "attribute",
              "attribute": "href",
              "returnArray": true
            },
            {
              "key": "info",
              "cssSelector": "a[href*=\"/comfy-node/\"]",
              "returnValue": "html",
              "returnArray": true
            }
          ]
        },
        "options": {
          "trimValues": false,
          "cleanUpText": false
        }
      },
      "id": "ea634d5d-f7c4-4fd7-a640-a9ef92cce5f3",
      "name": "Extract workflow info",
      "type": "n8n-nodes-base.html",
      "position": [
        1040,
        100
      ],
      "typeVersion": 1,
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "id": "19ee760f-4ce6-4f2e-b790-6d55c7b21524",
      "name": "Merge1",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        1600,
        180
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "id": "a16a852c-646c-4605-8b55-a8a37af5b128",
      "name": "Merge2",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        1960,
        180
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a09d9089-d598-43ff-a92a-bd3a09e1dfec",
              "leftValue": "={{ $json.count }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "dc57134b-7765-463c-a5f7-adac2e7a57f5",
      "name": "If Not Exists",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2120,
        180
      ]
    },
    {
      "parameters": {
        "url": "=http://nocodb:8080/api/v2/tables/m6z97l2pnysdafx/records/count",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "nocoDbApiToken",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "where",
              "value": "=(title,eq,{{ $json.title }})"
            }
          ]
        },
        "options": {}
      },
      "id": "73adb3df-ce0e-4ac4-87e2-6b3c8b4bb50c",
      "name": "Check Existence",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1780,
        20
      ],
      "credentials": {
        "nocoDbApiToken": {
          "id": "CdAgYZE9UhJrdXfW",
          "name": "NocoDB Token account"
        }
      }
    },
    {
      "parameters": {
        "fieldToSplitOut": "url, title, author, description",
        "options": {}
      },
      "id": "372b8d69-3063-4a52-b0c8-17e5d0a02734",
      "name": "Split Out2",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        2340,
        180
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "962b059a-93a7-4964-a85d-950d3763ac80",
      "name": "Embeddings OpenAI1",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1,
      "position": [
        2060,
        680
      ],
      "credentials": {
        "openAiApi": {
          "id": "unPHW41eId4wNLt5",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "d33473dc-e3b2-4965-9626-40fa43302ae8",
      "name": "Default Data Loader",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        2140,
        680
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "9bb4705d-cf18-45df-a543-7a6a35880f06",
      "name": "Recursive Character Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        2140,
        820
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a47b7bc3-367f-40f8-8fbb-3ce0db0ef724",
              "name": "data",
              "value": "=## Custom Node Name\n{{ $json.title }}\n## Author\n{{ $json.author }}\n## Description\n{{ $json.description }}\n## URL\n{{ $json.url }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "3842e6aa-e006-4257-b4fe-1e3010f141ff",
      "name": "Prepare Embedding Document",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1860,
        520
      ]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "weeks"
            }
          ]
        }
      },
      "id": "69d03516-f104-422a-9543-b319498c74ba",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        620,
        100
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.text }}",
        "options": {
          "systemPromptTemplate": "Use the following pieces of context to answer the users question. \nIf you don't know the answer, just say that you don't know, don't try to make up an answer.\n----------------\n{context}"
        }
      },
      "id": "eaa4b0e9-1c2b-4390-9cb9-6d819a295208",
      "name": "Question and Answer Chain",
      "type": "@n8n/n8n-nodes-langchain.chainRetrievalQa",
      "typeVersion": 1.3,
      "position": [
        2020,
        1300
      ]
    },
    {
      "parameters": {
        "model": "gpt-4o-mini",
        "options": {}
      },
      "id": "de93fc44-001c-4bbf-917f-21b77221d0f9",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        2020,
        1420
      ],
      "credentials": {
        "openAiApi": {
          "id": "unPHW41eId4wNLt5",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "topK": 5
      },
      "id": "c7408b87-b8c9-43f6-ba71-fd170e55f6e6",
      "name": "Vector Store Retriever",
      "type": "@n8n/n8n-nodes-langchain.retrieverVectorStore",
      "typeVersion": 1,
      "position": [
        2160,
        1420
      ]
    },
    {
      "parameters": {
        "qdrantCollection": {
          "__rl": true,
          "value": "comfyui-custom-nodes",
          "mode": "list",
          "cachedResultName": "comfyui-custom-nodes"
        },
        "options": {}
      },
      "id": "8d071d39-6ec1-4f0f-ba15-fd6a1dfa55f5",
      "name": "Qdrant Vector Store1",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "typeVersion": 1,
      "position": [
        2160,
        1520
      ],
      "credentials": {
        "qdrantApi": {
          "id": "QpSj8kvb7dl3kgFF",
          "name": "QdrantApi account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "fb95cc09-fc59-4a56-aad7-a4720ca5e980",
      "name": "Embeddings OpenAI",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1,
      "position": [
        2160,
        1620
      ],
      "credentials": {
        "openAiApi": {
          "id": "unPHW41eId4wNLt5",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "id": "7956c499-ca7e-4ba6-9fea-fc2e109f451a",
      "name": "Merge3",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        2360,
        1280
      ]
    },
    {
      "parameters": {
        "model": "gpt-4o-mini",
        "options": {}
      },
      "id": "77f6f565-2b1c-43da-b7a8-a707b7ea1d41",
      "name": "OpenAI Chat Model1",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        1620,
        1580
      ],
      "credentials": {
        "openAiApi": {
          "id": "unPHW41eId4wNLt5",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "9613cb7c-67d7-43b9-9fbf-274a5a3bac3e",
        "options": {
          "noResponseBody": true
        }
      },
      "id": "cb8a08a4-4e95-4d3d-8f19-d62b9ffa7648",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        660,
        1460
      ],
      "webhookId": "9613cb7c-67d7-43b9-9fbf-274a5a3bac3e"
    },
    {
      "parameters": {
        "inputText": "={{ $json.text }}",
        "categories": {
          "categories": [
            {
              "category": "custom nodes",
              "description": "question about comfyui custom nodes"
            },
            {
              "category": "implementation",
              "description": "question about comfyui implementation"
            }
          ]
        },
        "options": {
          "fallback": "other"
        }
      },
      "id": "123ae9c4-a2a5-48e2-973c-79c2ac432eaf",
      "name": "Text Classifier",
      "type": "@n8n/n8n-nodes-langchain.textClassifier",
      "typeVersion": 1,
      "position": [
        1620,
        1460
      ]
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "={{ $json.channel_id }}",
          "mode": "id"
        },
        "text": "={{ $json.response.text }}",
        "otherOptions": {
          "includeLinkToWorkflow": false,
          "thread_ts": {
            "replyValues": {
              "thread_ts": "={{ $json.message_timestamp }}"
            }
          }
        }
      },
      "id": "c7dfefe6-8186-4179-ac27-7fb74094514d",
      "name": "Reply: Custom Nodes",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.2,
      "position": [
        2520,
        1280
      ],
      "credentials": {
        "slackApi": {
          "id": "NqwWB9a6p0EO1gKx",
          "name": "Slack SNOW n8n-bot OAUTH TOKEN"
        }
      }
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "={{ $json.channel_id }}",
          "mode": "id"
        },
        "text": "={{ $json.response.text }}",
        "otherOptions": {
          "includeLinkToWorkflow": false,
          "thread_ts": {
            "replyValues": {
              "thread_ts": "={{ $json.message_timestamp }}"
            }
          }
        }
      },
      "id": "4d7a4145-2ad0-448b-8930-5f185c0b1979",
      "name": "Reply: Implementations",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.2,
      "position": [
        2520,
        1820
      ],
      "credentials": {
        "slackApi": {
          "id": "NqwWB9a6p0EO1gKx",
          "name": "Slack SNOW n8n-bot OAUTH TOKEN"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "comfyanonymous",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "ComfyUI",
          "mode": "list",
          "cachedResultName": "ComfyUI",
          "cachedResultUrl": "https://github.com/comfyanonymous/ComfyUI"
        },
        "filePath": "={{ $json.path }}",
        "additionalParameters": {
          "reference": ""
        }
      },
      "id": "10d69c32-3bdc-4254-bf1c-c97ae5849f93",
      "name": "GitHub",
      "type": "n8n-nodes-base.github",
      "typeVersion": 1,
      "position": [
        3640,
        180
      ],
      "credentials": {
        "githubApi": {
          "id": "oC0NTqqOXHFkCBa9",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "url": "https://api.github.com/repos/comfyanonymous/ComfyUI/git/trees/master?recursive=1",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "githubApi",
        "options": {}
      },
      "id": "4c8b6605-780b-4476-9466-35ea17bdbeb8",
      "name": "Get File List",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2880,
        180
      ],
      "credentials": {
        "githubApi": {
          "id": "oC0NTqqOXHFkCBa9",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "fieldToSplitOut": "tree",
        "options": {}
      },
      "id": "29df403e-936b-405d-b532-b817524b6c5b",
      "name": "File List",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        3060,
        180
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "24740f23-5048-408b-94cc-aaacbed924b0",
              "leftValue": "={{ $json.type }}",
              "rightValue": "blob",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "490129aa-1506-4bc4-94ee-932940a1e18d",
      "name": "If File",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3220,
        180
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a47b7bc3-367f-40f8-8fbb-3ce0db0ef724",
              "name": "data",
              "value": "=## File Path\n{{ $json.path }}\n## Type\n{{ $json.type }}\n## Code\n{{ $json.code }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "19df6d20-55ae-4055-a2ff-5b52844677c0",
      "name": "Prepare Embedding Document: Code",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        4280,
        180
      ]
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "id": "49cac73e-2644-429a-8d8b-d2e63a8157d4",
      "name": "Extract from File",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        3800,
        340
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "path, mode, type, sha, size, url",
        "options": {}
      },
      "id": "385b68b0-0e5e-4dd4-86c0-b4e9f01aae0b",
      "name": "Split Out4",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        3800,
        180
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "0d97deb5-d51f-4973-abf7-16c42c5887f9",
      "name": "Embeddings OpenAI2",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1,
      "position": [
        4480,
        320
      ],
      "credentials": {
        "openAiApi": {
          "id": "unPHW41eId4wNLt5",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "f5d4b2ac-a091-4cdf-94e8-fc596c2e2b5c",
      "name": "Default Data Loader1",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        4560,
        320
      ]
    },
    {
      "parameters": {
        "content": "## Update ComfyUI Implementation\n1. GitHub API로 ComfyUI 레포의 모든 파일 목록 조회\n2. 파일 중 확장자가 .py, .md인 파일 정보 취득\n3. .py의 경우 클래스, 함수, 스크립트 단위로 분리 (Code)\n4. File Path 정보와 File 내용 정보를 임베딩",
        "height": 164.0574648830847,
        "width": 561.2138239784348
      },
      "id": "628a25a7-7f33-4bab-a62c-7b905ffecd79",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2860,
        -300
      ]
    },
    {
      "parameters": {
        "mode": "insert",
        "qdrantCollection": {
          "__rl": true,
          "value": "comfyui-custom-nodes",
          "mode": "list",
          "cachedResultName": "comfyui-custom-nodes"
        },
        "options": {}
      },
      "id": "861ec394-b96e-4a9f-9a22-ec17ed724b82",
      "name": "Qdrant Vector Store: Custom Nodes",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "typeVersion": 1,
      "position": [
        2040,
        520
      ],
      "credentials": {
        "qdrantApi": {
          "id": "QpSj8kvb7dl3kgFF",
          "name": "QdrantApi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "insert",
        "qdrantCollection": {
          "__rl": true,
          "mode": "id",
          "value": "comfyui-code"
        },
        "options": {}
      },
      "id": "fe48ef8a-a311-4521-9fe8-e0575c1a0ef7",
      "name": "Qdrant Vector Store",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "typeVersion": 1,
      "position": [
        4480,
        180
      ],
      "credentials": {
        "qdrantApi": {
          "id": "QpSj8kvb7dl3kgFF",
          "name": "QdrantApi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.text }}",
        "options": {
          "systemPromptTemplate": "Use the following pieces of context to answer the users question. \nIf you don't know the answer, just say that you don't know, don't try to make up an answer.\n----------------\n{context}"
        }
      },
      "id": "22d48b38-4999-4dd6-ae14-56bb394c4d65",
      "name": "Question and Answer Chain1",
      "type": "@n8n/n8n-nodes-langchain.chainRetrievalQa",
      "typeVersion": 1.3,
      "position": [
        2020,
        1840
      ]
    },
    {
      "parameters": {
        "model": "gpt-4o-mini",
        "options": {}
      },
      "id": "82bbe634-92b9-4cdd-b5a4-79b8825bff20",
      "name": "OpenAI Chat Model2",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        2020,
        1960
      ],
      "credentials": {
        "openAiApi": {
          "id": "unPHW41eId4wNLt5",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "topK": 5
      },
      "id": "d756bbd6-1341-4c25-af6b-374e435346d7",
      "name": "Vector Store Retriever1",
      "type": "@n8n/n8n-nodes-langchain.retrieverVectorStore",
      "typeVersion": 1,
      "position": [
        2160,
        1960
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "ffcc5f87-3bfa-459e-82d8-d859d203391f",
      "name": "Embeddings OpenAI3",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1,
      "position": [
        2160,
        2160
      ],
      "credentials": {
        "openAiApi": {
          "id": "unPHW41eId4wNLt5",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "id": "3bf9fd45-1169-455d-857f-17b7f0d39290",
      "name": "Merge4",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        2360,
        1820
      ]
    },
    {
      "parameters": {
        "qdrantCollection": {
          "__rl": true,
          "value": "comfyui-code",
          "mode": "list",
          "cachedResultName": "comfyui-code"
        },
        "options": {}
      },
      "id": "4de2ffba-9f2d-428c-b5e8-b3230fa01930",
      "name": "Qdrant Vector Store2",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
      "typeVersion": 1,
      "position": [
        2160,
        2060
      ],
      "credentials": {
        "qdrantApi": {
          "id": "QpSj8kvb7dl3kgFF",
          "name": "QdrantApi account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "24740f23-5048-408b-94cc-aaacbed924b0",
              "leftValue": "={{ $json.path }}",
              "rightValue": ".py",
              "operator": {
                "type": "string",
                "operation": "endsWith"
              }
            },
            {
              "id": "2283b43d-e762-470e-937e-88502e4b9ab0",
              "leftValue": "={{ $json.path }}",
              "rightValue": ".md",
              "operator": {
                "type": "string",
                "operation": "endsWith"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "3a2821bd-9be5-4f50-bce9-a602fff4a441",
      "name": "If Required File",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3420,
        180
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "id": "abd4e121-94c3-45ce-bd34-3810b199354a",
      "name": "Merge5",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        3960,
        180
      ]
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import ast\n\n\ndef extract_code_segments(path: str, code: str) -> list[dict[str, str]]:\n    \"\"\"Python 코드를 파싱해 함수, 클래스, 스크립트 블록을 추출합니다.\"\"\"\n    if not path.endswith(\".py\"):\n        return [{\"path\": path, \"type\": \"non-python\", \"code\": code}]\n\n    tree = ast.parse(code)  # AST로 코드 파싱\n    results = []\n    script_code = []  # 함수/클래스 외부의 스크립트 코드 저장\n\n    # 코드 블록 추출 (함수, 클래스, 스크립트 구분)\n    for node in tree.body:\n        if isinstance(node, ast.FunctionDef):  # 함수\n            results.append({\n                \"path\": path,\n                \"type\": \"function\",\n                \"code\": ast.get_source_segment(code, node),\n            })\n        elif isinstance(node, ast.ClassDef):  # 클래스\n            results.append({\n                \"path\": path,\n                \"type\": \"class\",\n                \"code\": ast.get_source_segment(code, node),\n            })\n        else:  # 스크립트 블록\n            script_code.append(ast.get_source_segment(code, node))\n\n    # 스크립트 블록이 있는 경우 결과에 추가\n    if script_code:\n        results.append({\n            \"path\": path,\n            \"type\": \"script\",\n            \"code\": \"\\n\".join(script_code),\n        })\n\n    return results\n\n\noutput: list[dict[str, str]] = []\nfor item in _input.all():\n    output += extract_code_segments(item.json.path, item.json.data)\n\nreturn output"
      },
      "id": "b0d36c63-a7e2-4e63-b8d0-a843e4c41b08",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4120,
        180
      ]
    },
    {
      "parameters": {
        "method": "DELETE",
        "url": "=http://qdrant:6333/collections/comfyui-code",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "qdrantApi",
        "options": {}
      },
      "id": "58253a73-98aa-4cbf-8eac-bf8b416fa5c7",
      "name": "Remove a Collection",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2880,
        -60
      ],
      "credentials": {
        "qdrantApi": {
          "id": "QpSj8kvb7dl3kgFF",
          "name": "QdrantApi account"
        }
      }
    },
    {
      "parameters": {
        "chunkSize": 8000,
        "chunkOverlap": 100,
        "options": {}
      },
      "id": "bb652633-ef15-4a5d-888c-043d7025a92c",
      "name": "Recursive Character Text Splitter1",
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        4560,
        460
      ],
      "notes": "text embedding ada 002's maximum input tokens = 8191"
    }
  ],
  "pinData": {},
  "connections": {
    "Split Out": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Slack",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slack": {
      "main": [
        [
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Text Classifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch custom node list": {
      "main": [
        [
          {
            "node": "Extract workflow info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "URL": {
      "main": [
        [
          {
            "node": "Full URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Node Info": {
      "main": [
        [
          {
            "node": "Parse Node Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Full URL": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Node Info": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Extract workflow info": {
      "main": [
        [
          {
            "node": "Node Info",
            "type": "main",
            "index": 0
          },
          {
            "node": "URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Check Existence",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "If Not Exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Existence": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Not Exists": {
      "main": [
        [
          {
            "node": "Split Out2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out2": {
      "main": [
        [
          {
            "node": "Create Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI1": {
      "ai_embedding": [
        [
          {
            "node": "Qdrant Vector Store: Custom Nodes",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Qdrant Vector Store: Custom Nodes",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Create Rows": {
      "main": [
        [
          {
            "node": "Prepare Embedding Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Embedding Document": {
      "main": [
        [
          {
            "node": "Qdrant Vector Store: Custom Nodes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Fetch custom node list",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Question and Answer Chain": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Question and Answer Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Vector Store Retriever": {
      "ai_retriever": [
        [
          {
            "node": "Question and Answer Chain",
            "type": "ai_retriever",
            "index": 0
          }
        ]
      ]
    },
    "Qdrant Vector Store1": {
      "ai_vectorStore": [
        [
          {
            "node": "Vector Store Retriever",
            "type": "ai_vectorStore",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Qdrant Vector Store1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Merge3": {
      "main": [
        [
          {
            "node": "Reply: Custom Nodes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Text Classifier",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text Classifier": {
      "main": [
        [
          {
            "node": "Question and Answer Chain",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 0
          },
          {
            "node": "Question and Answer Chain1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Question and Answer Chain",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get File List": {
      "main": [
        [
          {
            "node": "File List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File List": {
      "main": [
        [
          {
            "node": "If File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If File": {
      "main": [
        [
          {
            "node": "If Required File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GitHub": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          },
          {
            "node": "Split Out4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Embedding Document: Code": {
      "main": [
        [
          {
            "node": "Qdrant Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Merge5",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Split Out4": {
      "main": [
        [
          {
            "node": "Merge5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI2": {
      "ai_embedding": [
        [
          {
            "node": "Qdrant Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader1": {
      "ai_document": [
        [
          {
            "node": "Qdrant Vector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Question and Answer Chain1": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Question and Answer Chain1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Vector Store Retriever1": {
      "ai_retriever": [
        [
          {
            "node": "Question and Answer Chain1",
            "type": "ai_retriever",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI3": {
      "ai_embedding": [
        [
          {
            "node": "Qdrant Vector Store2",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Merge4": {
      "main": [
        [
          {
            "node": "Reply: Implementations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Qdrant Vector Store2": {
      "ai_vectorStore": [
        [
          {
            "node": "Vector Store Retriever1",
            "type": "ai_vectorStore",
            "index": 0
          }
        ]
      ]
    },
    "If Required File": {
      "main": [
        [
          {
            "node": "GitHub",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge5": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Prepare Embedding Document: Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter1": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader1",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "96127c5f-4159-4a9b-86e8-e4dfc7d7dbaa",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "50b2810ee77b8d7d38c0ead02407629fd7b35cf107cced5585240e3ac45fe0a1"
  },
  "id": "PLrkcy4qDFywvjTI",
  "tags": []
}
